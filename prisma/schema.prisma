// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Doctor {
  id                    String    @id @default(cuid())
  title                 String    
  name                  String
  email                 String    @unique
  phone                 String    @unique
  password              String
  city                  String
  specialization        String
  gender                Gender
  emailVerified         DateTime?
  resetToken            String?   // Add this
  resetTokenExpiry      DateTime? // Add this
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("doctors")
}
enum Gender {
  MALE
  FEMALE
  
}

model Patient {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String    @unique
  password      String
  city          String
  gender        Gender
  emailVerified DateTime?
  resetToken    String?   
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  medicalRecords    PatientMedicalRecord[]

  @@map("patients")
}


model MedicineOrder {
  id              String          @id @default(cuid())
  medicines       String?         // For manual medicine entry
  prescriptionUrl String?        // For prescription upload
  address         String
  phoneNumber     String
  patientName     String
  pharmacyName    String?
  amount          Float?
  paymentMethod   PaymentMethod
  orderStatus     OrderStatus     @default(PENDING)
  paymentStatus   PaymentStatus   @default(PENDING)
  transaction     Transaction?    // Optional relation for payment details
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("medicine_orders")
}

model Transaction {
  id              String         @id @default(cuid())
  amount          Float
  paymentDate     DateTime       @default(now())
  stripePaymentId String?        // Stripe payment intent ID
  status          PaymentStatus
  medicineOrder   MedicineOrder  @relation(fields: [orderId], references: [id])
  orderId         String         @unique // One-to-one relation
  metadata        Json?          // For any additional payment details

  @@map("transactions")
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CARD
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}


model PatientMedicalRecord {
  id                  String    @id @default(cuid())
  // Required Information
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              Gender
  email              String
  phoneNumber        String

  // Medical Information
  medicalConditions   String[]  @default([])
  allergies           String[]  @default([])
  currentMedications  String[]  @default([])

  // Health Metrics
  height              Float?    // in feet
  weight              Float?    // in kg
  bloodType           BloodType?
  bloodPressure       Json?     // { systolic: number, diastolic: number }
  heartRate           Int?

  // Medical Reports
  medicalReportUrl    String?

  // Emergency Contact
  emergencyContactName    String
  emergencyContactPhone   String

  // Consent
  consentToStore     Boolean   @default(false)

  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  patient            Patient   @relation(fields: [patientId], references: [id])
  patientId          String

  @@map("patient_medical_records")
}



enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}