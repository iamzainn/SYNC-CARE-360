generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id                 String               @id @default(cuid())
  title              String
  name               String
  email              String               @unique
  phone              String               @unique
  password           String
  city               String
  specialization     String
  gender             Gender
  emailVerified      DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isVerifiedDoctor   Boolean              @default(false)
  Conversation       Conversation[]
  verification       DoctorVerification?
  HomeServiceBooking HomeServiceBooking[]
  onlineService      OnlineService?
  Services           Services?

  @@map("doctors")
}

model DoctorVerification {
  id              String             @id @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  status          VerificationStatus @default(PENDING)
  fullName        String
  email           String             @unique
  phoneNumber     String
  cnic            String             @unique
  pmcNumber       String             @unique
  graduationYear  Int
  specialization  String[]
  expertise       String[]
  experienceYears Int
  medicalSchool   String
  profilePhoto    String
  degreeImage     String
  pmcImage        String
  cnicImage       String
  doctorId        String             @unique
  doctor          Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
}

model Patient {
  id                 String                 @id @default(cuid())
  name               String
  email              String                 @unique
  phone              String                 @unique
  password           String
  city               String
  gender             Gender
  emailVerified      DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  Conversation       Conversation[]
  HomeServiceBooking HomeServiceBooking[]
  onlineAppointments OnlineAppointment[]
  medicalRecords     PatientMedicalRecord[]

  @@map("patients")
  EmergencyPatientDetails EmergencyPatientDetails[]
  TestBooking TestBooking[]
}


model EmergencyPatientDetails {
  id          String    @id @default(cuid())
  phoneNumber String    // Emergency contact number
  patientId   String    // Reference to patient
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("emergency_patient_details")
  @@index([patientId])
}


model TestBooking {
  id                String        @id @default(cuid())
  patientId         String
  patient           Patient       @relation(fields: [patientId], references: [id])
  bookingDate       DateTime      @default(now())
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  amount            Float
  serviceCharge     Float         @default(100)
  totalAmount       Float
  address           String        // Sample collection address
  phoneNumber       String        // Contact for collection
  
  // Payment details
  stripePaymentId   String?       // For card payments
  paymentDate       DateTime?     // When payment was completed
  
  // Store test details as they were at time of booking
  bookedTests       Json[]        // Array of test details including lab info
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("test_bookings")
  @@index([patientId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model MedicineOrder {
  id              String        @id @default(cuid())
  medicines       String[]
  prescriptionUrl String?
  address         String
  email           String
  phoneNumber     String
  patientName     String
  pharmacyName    String?
  amount          Float
  serviceCharge   Float         @default(200)
  totalAmount     Float
  paymentMethod   PaymentMethod
  orderStatus     OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction?

  @@map("medicine_orders")
}

model Transaction {
  id              String        @id @default(cuid())
  amount          Float
  paymentDate     DateTime      @default(now())
  stripePaymentId String?
  status          PaymentStatus
  orderId         String        @unique
  metadata        Json?
  medicineOrder   MedicineOrder @relation(fields: [orderId], references: [id])
  
  

  @@map("transactions")
  
}

model PatientMedicalRecord {
  id                    String     @id @default(cuid())
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                Gender
  email                 String
  phoneNumber           String
  medicalConditions     String[]   @default([])
  allergies             String[]   @default([])
  currentMedications    String[]   @default([])
  height                Float?
  weight                Float?
  bloodType             BloodType?
  bloodPressure         Json?
  heartRate             Int?
  medicalReportUrl      String?
  emergencyContactName  String
  emergencyContactPhone String
  consentToStore        Boolean    @default(false)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  patientId             String
  patient               Patient    @relation(fields: [patientId], references: [id])

  @@map("patient_medical_records")
}

model Services {
  id              String         @id @default(cuid())
  doctorId        String         @unique
  onlineServiceId String?
  homeService     HomeService?
  doctor          Doctor         @relation(fields: [doctorId], references: [id])
  onlineService   OnlineService? @relation(fields: [onlineServiceId], references: [id])
}

model HomeService {
  id                 String                      @id @default(cuid())
  serviceId          String                      @unique
  isActive           Boolean                     @default(false)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  service            Services                    @relation(fields: [serviceId], references: [id])
  HomeServiceBooking HomeServiceBooking[]
  slots              HomeServiceSlot[]
  specializations    HomeServiceSpecialization[]
}

model HomeServiceSpecialization {
  id            String             @id @default(cuid())
  homeServiceId String
  type          SpecializationType
  price         Float
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  homeService   HomeService        @relation(fields: [homeServiceId], references: [id])
}

model HomeServiceSlot {
  id            String      @id @default(cuid())
  homeServiceId String
  dayOfWeek     DayOfWeek
  startTime     String
  endTime       String
  isReserved    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  homeService   HomeService @relation(fields: [homeServiceId], references: [id])
}

model HomeServiceBooking {
  id               String         @id @default(cuid())
  patientId        String
  doctorId         String
  homeServiceId    String
  status           String         @default("pending")
  scheduledDate    DateTime
  dayOfWeek        String
  startTime        String
  endTime          String
  totalAmount      Float
  selectedServices Json
  paymentMethod    String         @default("pending")
  paymentStatus    String         @default("pending")
  stripePaymentId  String?
  patientDetails   Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Conversation     Conversation[]
  doctor           Doctor         @relation(fields: [doctorId], references: [id])
  homeService      HomeService    @relation(fields: [homeServiceId], references: [id])
  patient          Patient        @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@index([homeServiceId])
}

model OnlineService {
  id           String              @id @default(cuid())
  doctorId     String              @unique
  isActive     Boolean             @default(false)
  fee          Float
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  appointments OnlineAppointment[]
  doctor       Doctor              @relation(fields: [doctorId], references: [id])
  slots        OnlineServiceSlot[]
  Services     Services[]
}

model OnlineServiceSlot {
  id              String        @id @default(cuid())
  onlineServiceId String
  dayOfWeek       DayOfWeek
  startTime       String
  endTime         String
  isReserved      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  onlineService   OnlineService @relation(fields: [onlineServiceId], references: [id])

  @@index([onlineServiceId])
}

model OnlineAppointment {
  id              String            @id @default(cuid())
  onlineServiceId String
  doctorId        String
  patientId       String
  appointmentDate DateTime
  startTime       String
  endTime         String
  appointmentType AppointmentType
  stripePaymentId String?
  visitType       VisitType
  status          AppointmentStatus @default(PENDING)
  amount          Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Conversation    Conversation[]
  onlineService   OnlineService     @relation(fields: [onlineServiceId], references: [id])
  patient         Patient           @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([onlineServiceId])
  @@index([doctorId])
}

model Conversation {
  id                   String              @id @default(cuid())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  doctorId             String
  patientId            String
  homeServiceBookingId String?
  onlineAppointmentId  String?
  lastMessageAt        DateTime            @default(now())
  lastMessageContent   String?
  unreadCount          Int                 @default(0)
  isActive             Boolean             @default(true)
  deactivatedAt        DateTime?
  deactivatedBy        String?
  deactivationReason   String?
  doctor               Doctor              @relation(fields: [doctorId], references: [id])
  homeServiceBooking   HomeServiceBooking? @relation(fields: [homeServiceBookingId], references: [id])
  onlineAppointment    OnlineAppointment?  @relation(fields: [onlineAppointmentId], references: [id])
  patient              Patient             @relation(fields: [patientId], references: [id])
  messages             Message[]
  typingIndicators     TypingIndicator[]

  @@unique([doctorId, patientId, homeServiceBookingId])
  @@unique([doctorId, patientId, onlineAppointmentId])
  @@index([doctorId])
  @@index([patientId])
  @@index([lastMessageAt])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  senderRole     Role
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         MessageStatus @default(SENT)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readBy         ReadReceipt[]

  @@index([conversationId])
  @@index([senderId])
}

model ReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  userRole  Role
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model TypingIndicator {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  userRole       Role
  isTyping       Boolean      @default(false)
  lastTypedAt    DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  userRole  Role
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CARD
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  PENDING
  SAMPLE_COLLECTED
  PROCESSING
  COMPLETED
  CANCELLED
}


enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum SpecializationType {
  GENERAL_CHECKUP
  WOUND_DRESSING
  PHYSICAL_THERAPY
  ELDERLY_CARE
  POST_SURGERY
  EMERGENCY_CARE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}




enum AppointmentType {
  GENERAL_CHECKUP
  FOLLOW_UP
  PRESCRIPTION_RENEWAL
  TEST_REVIEW
  SPECIALIST_CONSULTATION
}

enum VisitType {
  FIRST_TIME
  FOLLOW_UP
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Role {
  DOCTOR
  PATIENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum NotificationType {
  NEW_MESSAGE
  BOOKING_UPDATE
  PAYMENT_RECEIVED
  CONSULTATION_REMINDER
}
