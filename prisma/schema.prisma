// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Doctor {
  id                    String    @id @default(cuid())
  title                 String    
  name                  String
  email                 String    @unique
  phone                 String    @unique
  password              String
  city                  String
  specialization        String
  gender                Gender
  emailVerified         DateTime?
  resetToken            String?   
  resetTokenExpiry      DateTime? 
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  isVerifiedDoctor      Boolean @default(false)
  
  // Add this relation
  verification         DoctorVerification?

  @@map("doctors")
  Services Services?
}

model DoctorVerification {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        VerificationStatus @default(PENDING)
  fullName      String
  email         String      @unique
  phoneNumber   String
  cnic          String      @unique  // Format: xxxxx-xxxxxxx-x
  
  // Professional Information
  pmcNumber     String      @unique  // PMC/PMDC Registration Number
  graduationYear Int
  specialization String[]   // Array of specializations
  expertise     String[]    // Array of expertise areas
  experienceYears Int
  
  medicalSchool String      // Name of medical college/university
  
  // Documents (Store URLs/paths to cloud storage)
  profilePhoto  String      // Passport size photo URL
  degreeImage   String      // MBBS degree scan URL
  pmcImage      String      // PMC registration certificate URL
  cnicImage     String      // CNIC scan URL
  currentCity   String


  doctorId      String      @unique  // Foreign key
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum Gender {
  MALE
  FEMALE
}




model Patient {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String    @unique
  password      String
  city          String
  gender        Gender
  emailVerified DateTime?
  resetToken    String?   
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  medicalRecords    PatientMedicalRecord[]

  @@map("patients")
}


model MedicineOrder {
  id              String          @id @default(cuid())
  medicines       String?         // For manual medicine entry
  prescriptionUrl String?        // For prescription upload
  address         String
  phoneNumber     String
  patientName     String
  pharmacyName    String?
  amount          Float?
  paymentMethod   PaymentMethod
  orderStatus     OrderStatus     @default(PENDING)
  paymentStatus   PaymentStatus   @default(PENDING)
  transaction     Transaction?    // Optional relation for payment details
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("medicine_orders")
}

model Transaction {
  id              String         @id @default(cuid())
  amount          Float
  paymentDate     DateTime       @default(now())
  stripePaymentId String?        // Stripe payment intent ID
  status          PaymentStatus
  medicineOrder   MedicineOrder  @relation(fields: [orderId], references: [id])
  orderId         String         @unique // One-to-one relation
  metadata        Json?          // For any additional payment details

  @@map("transactions")
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CARD
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}


model PatientMedicalRecord {
  id                  String    @id @default(cuid())
  // Required Information
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              Gender
  email              String
  phoneNumber        String

  // Medical Information
  medicalConditions   String[]  @default([])
  allergies           String[]  @default([])
  currentMedications  String[]  @default([])

  // Health Metrics
  height              Float?    // in feet
  weight              Float?    // in kg
  bloodType           BloodType?
  bloodPressure       Json?     // { systolic: number, diastolic: number }
  heartRate           Int?


  medicalReportUrl    String?

  
  emergencyContactName    String
  emergencyContactPhone   String

  
  consentToStore     Boolean   @default(false)

  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  patient            Patient   @relation(fields: [patientId], references: [id])
  patientId          String

  @@map("patient_medical_records")
}



enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}


model Services {
  id          String        @id @default(cuid())
  doctorId    String        @unique
  doctor      Doctor        @relation(fields: [doctorId], references: [id])
  homeService HomeService?
}

model HomeService {
  id          String   @id @default(cuid())
  serviceId   String   @unique
  service     Services @relation(fields: [serviceId], references: [id])
  isActive    Boolean  @default(false)
  
  // Specializations with prices
  specializations HomeServiceSpecialization[]
  
  // Availability slots
  slots      HomeServiceSlot[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model HomeServiceSpecialization {
  id            String             @id @default(cuid())
  homeServiceId String
  homeService   HomeService        @relation(fields: [homeServiceId], references: [id])
  type          SpecializationType // Changed from String to enum
  price         Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}


model HomeServiceSlot {
  id            String      @id @default(cuid())
  homeServiceId String
  homeService   HomeService @relation(fields: [homeServiceId], references: [id])
  dayOfWeek     DayOfWeek   // Changed from String to enum
  startTime     String
  endTime       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}



enum SpecializationType {
  GENERAL_CHECKUP
  WOUND_DRESSING
  PHYSICAL_THERAPY
  ELDERLY_CARE
  POST_SURGERY
  EMERGENCY_CARE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}


